// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Table
model User {
  id                Int           @id @default(autoincrement())
  firstName         String
  middleName        String?
  lastName          String
  email             String        @unique
  password          String
  mobileNumber      String
  dateOfBirth       DateTime
  standard          Int
  schoolName        String
  city              String
  totalQuizzesTaken Int           @default(0)
  isAdmin           Boolean       @default(false)
  quizResults       QuizResult[]
  certificates      Certificate[]
  createdQuizzes    Quiz[]

  @@map("users")
}

// Quiz Table
model Quiz {
  id                Int            @id @default(autoincrement())
  title             String
  startDate         DateTime
  endDate           DateTime
  categories        String[] // Updated to store multiple categories
  isBasic           Boolean // Standardized isBasic field
  imageLink         String
  description       String
  adminId           Int
  admin             User           @relation(fields: [adminId], references: [id])
  quizResults       QuizResult[]
  quizAnalytics     QuizAnalytics?
  certificates      Certificate[]
  selectedQuestions QuizQuestion[] // <-- Relation for selected questions

  @@map("quizzes")
}

// Question Table
model Question {
  id            Int            @id @default(autoincrement())
  question      String
  correctAnswer String
  option1       String
  option2       String
  option3       String
  category      String
  isBasic       Boolean // Standardized isBasic field
  imageUrl      String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  QuizQuestion  QuizQuestion[]
}

// QuizQuestion Table - Stores the relation between Quiz and Question
model QuizQuestion {
  id         Int      @id @default(autoincrement())
  quizId     Int
  questionId Int
  quiz       Quiz     @relation(fields: [quizId], references: [id])
  question   Question @relation(fields: [questionId], references: [id])

  @@map("quiz_questions")
}

// QuizResult Table
model QuizResult {
  id               Int  @id @default(autoincrement())
  userId           Int
  quizId           Int
  user             User @relation(fields: [userId], references: [id])
  quiz             Quiz @relation(fields: [quizId], references: [id])
  score            Int
  correctAnswers   Int
  incorrectAnswers Int
  skippedQuestions Int

  @@map("quiz_results")
}

// Certificate Table
model Certificate {
  id             Int      @id @default(autoincrement())
  userId         Int
  quizId         Int
  user           User     @relation(fields: [userId], references: [id])
  quiz           Quiz     @relation(fields: [quizId], references: [id])
  certificateURL String
  issuedDate     DateTime

  @@map("certificates")
}

// QuizAnalytics Table
model QuizAnalytics {
  id                Int   @id @default(autoincrement())
  quizId            Int   @unique
  quiz              Quiz  @relation(fields: [quizId], references: [id])
  totalParticipants Int
  averageScore      Float
  highestScore      Int
  lowestScore       Int

  @@map("quiz_analytics")
}
